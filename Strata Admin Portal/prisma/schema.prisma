// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fund {
  id        String   @id @default(cuid())
  name      String
  balance   Float
  type      String   // "administration" or "capitalWorks"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  transactions Transaction[]
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  type        String   // "income" or "expense"
  fundId      String
  fund        Fund     @relation(fields: [fundId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  priority  String   // "low", "medium", "high"
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id        String   @id @default(cuid())
  title     String
  date      DateTime
  time      String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   // "open", "in-progress", "pending", "closed"
  priority    String   // "low", "medium", "high"
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  comments    TicketComment[]
}

model TicketComment {
  id        String   @id @default(cuid())
  content   String
  author    String
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

